/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        a {
            bindings = <&kp ESCAPE>;
            key-positions = <1 0>;
        };

        b {
            bindings = <&kp C_AC_NEXT_KEYBOARD_LAYOUT_SELECT>;
            key-positions = <11 10>;
        };

        c {
            bindings = <&kp TAB>;
            key-positions = <21 20>;
        };

        d {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        f {
            bindings = <&kp MINUS>;
            key-positions = <16 17>;
        };

        g {
            bindings = <&kp EQUAL>;
            key-positions = <17 18>;
        };

        bootloaderleft {
            bindings = <&bootloader>;
            key-positions = <0 1 2 3>;
        };

        bootloaderright {
            bindings = <&bootloader>;
            key-positions = <6 7 8 9>;
        };

        commandspace {
            bindings = <&kp LG(SPACE)>;
            key-positions = <12 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwert {
            bindings = <
  &kp Q               &kp W  &kp E      &kp R                   &kp T                             &kp Y      &kp U                 &kp I             &kp O    &kp P
  &lt 4 A             &kp S  &kp D      &kp F                   &kp G                             &kp H      &kp J                 &kp K             &kp L    &lt 2 SEMI
  &mt Z LEFT_CONTROL  &kp X  &kp C      &kp V                   &kp B                             &kp N      &kp M                 &kp COMMA         &kp DOT  &kp FSLH
                             &lt 1 F11  &mt LEFT_COMMAND SPACE  &mt LS(LA(LC(LEFT_GUI))) ENTER    &lt 1 F12  &mt LEFT_SHIFT ENTER  &mt LEFT_ALT SQT
            >;
        };

        num {
            bindings = <
  &kp N1                &kp N2          &kp N3          &kp N4          &kp N5            &kp N6          &kp N7          &kp N8          &kp N9          &kp N0
  &kp LG(N1)            &kp LG(N2)      &kp LG(N3)      &kp LG(N4)      &kp LG(N5)        &kp LG(N6)      &kp LG(N7)      &kp LG(N8)      &kp LG(N9)      &kp LG(N0)
  &kp LS(LG(NUMBER_1))  &kp LS(LG(N2))  &kp LS(LG(N3))  &kp LS(LG(N4))  &kp LS(LG(N5))    &kp LS(LG(N6))  &kp LS(LG(N7))  &kp LS(LG(N8))  &kp LS(LG(N9))  &kp LS(LG(N0))
                                        &trans          &trans          &trans            &trans          &trans          &trans
            >;
        };

        arrow {
            bindings = <
  &kp EXCLAMATION  &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE     &kp LG(LEFT_BRACKET)  &kp PAGE_DOWN  &kp PG_UP  &kp LG(RIGHT_BRACKET)  &trans
  &kp POUND        &kp DOLLAR   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE    &kp LEFT              &kp DOWN       &kp UP     &kp RIGHT              &trans
  &kp AMPERSAND    &kp CARET    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp TILDE    &kp MINUS             &kp EQUAL      &trans     &trans                 &trans
                                &trans                &trans                 &trans       &trans                &trans         &trans
            >;
        };

        control {
            bindings = <
  &kp F1  &kp F2        &kp F3        &kp F4         &kp F5          &kp F6      &kp F7          &kp F8  &kp F9  &kp F10
  &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3    &bt BT_CLR  &bt BT_CLR_ALL  &trans  &trans  &trans
  &trans  &trans        &trans        &trans         &trans          &trans      &trans          &trans  &trans  &trans
                        &trans        &kp BACKSPACE  &trans          &trans      &trans          &trans
            >;
        };

        layer_4 {
            bindings = <
  &kp F1  &kp F2        &kp F3        &kp F4         &kp F5          &kp F6      &kp F7          &kp F8  &kp F9  &kp F10
  &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3    &bt BT_CLR  &bt BT_CLR_ALL  &trans  &trans  &trans
  &trans  &trans        &trans        &trans         &trans          &trans      &trans          &trans  &trans  &trans
                        &trans        &kp BACKSPACE  &trans          &trans      &trans          &trans
            >;
        };
    };
};
